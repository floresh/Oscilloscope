var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var ti_sysbios_family_arm_m3_Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$.
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;

/*
 * Uncomment this line to disable the Error print function.
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/*
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/*
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
var ti_sysbios_family_arm_m3_Hwi0Params = new ti_sysbios_family_arm_m3_Hwi.Params();
ti_sysbios_family_arm_m3_Hwi0Params.instance.name = "ADCHwi_handle";
ti_sysbios_family_arm_m3_Hwi0Params.priority = 0;
Program.global.ADCHwi_handle = ti_sysbios_family_arm_m3_Hwi.create(30, "&ADC_Hwi", ti_sysbios_family_arm_m3_Hwi0Params);
Clock.tickPeriod = 5000;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 1;
clock0Params.startFlag = true;
Program.global.clock0 = Clock.create("&buttonScanning", 1, clock0Params);
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "buttonMailbox";
Program.global.buttonMailbox = Mailbox.create(1, 10, mailbox0Params);
Semaphore.supportsEvents = false;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "displaySemaphore";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.displaySemaphore = Semaphore.create(0, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "waveSemaphore";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.waveSemaphore = Semaphore.create(0, semaphore1Params);
var task0Params = new Task.Params();
task0Params.instance.name = "userInputTask";
task0Params.vitalTaskFlag = false;
task0Params.priority = 3;
Program.global.userInputTask = Task.create("&buttonHandler", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "displayTask";
task1Params.priority = 2;
Program.global.displayTask = Task.create("&drawFrame", task1Params);
var task0Params0 = new Task.Params();
task0Params0.instance.name = "waveFormTask";
task0Params0.vitalTaskFlag = false;
task0Params0.priority = 4;
Program.global.waveFormTask = Task.create("&findTrigger", task0Params0);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "FFTSemaphore";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.FFTSemaphore = Semaphore.create(null, semaphore2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "FFTdisplay";
task3Params.priority = 1;
task3Params.vitalTaskFlag = false;
Program.global.FFTdisplay = Task.create("&calculateFFT", task3Params);
